<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorials on Clarity</title>
    <link>https://www.vladaluas.com/series/tutorials/</link>
    <description>Recent content in Tutorials on Clarity</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Thu, 11 Feb 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://www.vladaluas.com/series/tutorials/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Code Maintenance</title>
      <link>https://www.vladaluas.com/post/code-maintenance/</link>
      <pubDate>Thu, 11 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.vladaluas.com/post/code-maintenance/</guid>
      <description>
        
          
&lt;script src=&#34;https://www.vladaluas.com/post/code-maintenance/index.en_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;&lt;/br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Insert Lead paragraph here.&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;In this article I would like to take a look at some coding principles and best practices and discuss what can help you, as a data analyst, write and maintain code that can be easily shared and understood by other analysts or yourself, when you look at your code at a later time.&lt;/p&gt;
&lt;p&gt;I often found myself in the situation in which I had to come back and adjust some code I had written previously. Depending on how I’ve written my code, it could be a simple task that took 5-15 minutes or it could take the better part of my day.&lt;/p&gt;
&lt;p&gt;You might be thinking that the time it takes to review and update the code depends on the complexity of the code and the number of lines.&lt;/p&gt;
&lt;p&gt;This is indeed true, to some extent. If you have a lot of lines in your code, it can be problematic indeed to single out the one, or ones, that need changing. However, from my personal experience just as much time is spent trying to remember why you decided on one approach as opposed to another. This is even more evident when someone else needs to look at your code, or you need to check someone else’ code.&lt;/p&gt;
&lt;p&gt;Especially when you start coding, the first instinct is to automate what you do manually and basically recreate the manual tasks using code. This can result in a lot of lines and maybe it’s not the most efficient code.&lt;/p&gt;
&lt;p&gt;This is not a problem, even if it’s not the most efficient code, it is way better than doing the process manually.&lt;/p&gt;
&lt;p&gt;So, how do you avoid the two main problems mentioned above, reducing the lines of code you are using, and remembering the scope of the code?&lt;/p&gt;
&lt;p&gt;This can be done using two methods:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Using as many comments as possible in our code&lt;/li&gt;
&lt;li&gt;Observing the &lt;strong&gt;WET&lt;/strong&gt; / &lt;strong&gt;DRY&lt;/strong&gt; principle&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We will take a look at these two methods in more detail below.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;using-comments-in-code&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Using comments in code&lt;/h1&gt;
&lt;p&gt;Comments are a great way to communicate with either your colleagues or your future self about the purpose of the code you are using. Let’s check the example below in which we want to plot the &lt;code&gt;mtcars&lt;/code&gt; dataset from the &lt;code&gt;ggplot2&lt;/code&gt; package and we want to show the miles per gallon (&lt;strong&gt;mpg&lt;/strong&gt;) as a distribution of the number of cylinders (&lt;strong&gt;cyl&lt;/strong&gt;). Also we would like to show the name of the car. We can do this using the code below:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
#&amp;gt; -- Attaching packages --------------------------------------- tidyverse 1.3.0 --
#&amp;gt; v ggplot2 3.3.3     v purrr   0.3.4
#&amp;gt; v tibble  3.0.6     v dplyr   1.0.4
#&amp;gt; v tidyr   1.1.2     v stringr 1.4.0
#&amp;gt; v readr   1.4.0     v forcats 0.5.1
#&amp;gt; -- Conflicts ------------------------------------------ tidyverse_conflicts() --
#&amp;gt; x dplyr::filter() masks stats::filter()
#&amp;gt; x dplyr::lag()    masks stats::lag()&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mtcars %&amp;gt;%
  mutate(car_names = rownames(mtcars),
         cyl = as.factor(cyl)) %&amp;gt;%
  ggplot(mapping = aes(x = cyl, y = mpg)) +
  geom_boxplot() +
  geom_point() +
  geom_text(mapping = aes(label = car_names), 
            hjust = 0,
            nudge_x = 0.05,
            check_overlap = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://www.vladaluas.com/post/code-maintenance/index.en_files/figure-html/uncommented_code-1.png&#34; width=&#34;100%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now let’s take a look at the same code but with comments added and see if it makes more sense. You can comment a line in &lt;code&gt;R&lt;/code&gt; by placing a &lt;code&gt;#&lt;/code&gt; at the start of the comment, and the program will skip the rest of the line from the analysis.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# We need the tidyverse library since it contains
#   - the ggplot2 package for graphics
#   - the mutate function for data transformation
library(tidyverse)


mtcars %&amp;gt;%
# We first need a column with the name of the cars.
# In case we need to use it later it&amp;#39;s easier to use the column not the whole function
  mutate(car_names = rownames(mtcars), 
# We need to transform the `cyl` column into a factor because the boxplot does not work with continuous values
         cyl = as.factor(cyl)) %&amp;gt;%
  ggplot(mapping = aes(x = cyl, y = mpg)) +
  
# We will use a boxplot as it&amp;#39;s the best ways to show comparisons between classes and the variance within a class
  geom_boxplot() +
# We will use points over the boxplots to show where each observation falls exactly
  geom_point() +
# The text is optional but a nice to have, so we will know which car is which
  geom_text(mapping = aes(label = car_names),
  
# We will add some adjustments to the geom_text so the writing will not overlap the points
            hjust = 0,
            nudge_x = 0.05,
            check_overlap = TRUE) # Eliminate the overlapping values for clarity&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://www.vladaluas.com/post/code-maintenance/index.en_files/figure-html/commented_code-1.png&#34; width=&#34;100%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;As you can see, it is much easier for someone to look at the second example and understand why I have added the elements that I did and check if some of them are useful or not in the code, or the final product. Some of you might disagree with my choices, however, you know why I chose this approach and you can base your argument on that.&lt;/p&gt;
&lt;p&gt;The same goes for my future self. If I would try to recreate the code for a different project, I might lose some time trying to figure out why I chose to use a boxplot and not just a simple scatter plot, and why I chose to transform the &lt;strong&gt;cyl&lt;/strong&gt; column into a factor and not just leave it like it is.&lt;/p&gt;
&lt;p&gt;In my first attempt I might end up with something like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
mtcars %&amp;gt;%
  mutate(car_names = rownames(mtcars)) %&amp;gt;%
  ggplot(mapping = aes(x = cyl, y = mpg)) +
  geom_point() +
  geom_text(mapping = aes(label = car_names), hjust = 0, nudge_x = 0.05, check_overlap = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://www.vladaluas.com/post/code-maintenance/index.en_files/figure-html/incomplete_reproduction-1.png&#34; width=&#34;100%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;As we can see this is a rough approximation of the previous plot. So, I might think to myself, why not use a boxplot? And then I will see the following:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
mtcars %&amp;gt;%
  mutate(car_names = rownames(mtcars)) %&amp;gt;%
  ggplot(mapping = aes(x = cyl, y = mpg)) +
  geom_boxplot() +
  geom_point() +
  geom_text(mapping = aes(label = car_names), hjust = 0, nudge_x = 0.05, check_overlap = TRUE)
#&amp;gt; Warning: Continuous x aesthetic -- did you forget aes(group=...)?&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://www.vladaluas.com/post/code-maintenance/index.en_files/figure-html/complete_reproduction-1.png&#34; width=&#34;100%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;You can see that this is not ideal. A boxplot needs a factor in order to create categories. A continuous value will not allow it to do so because it can have too many values. I will end up at the same conclusion I’ve done previously when I wrote it the first time. This could have been avoided if I would have taken a few minutes and inserted the comments into the code.&lt;/p&gt;
&lt;p&gt;I know this is not a very complicated piece of code and the five minutes do not seem like much, and you are right. However, if you have a larger project and hundreds of lines of code, you will find that what took five minutes here, can take some solid hours from your time. Or, if the code is particularly complicated and the changes are too many, you can find yourself in a situation in which you need to change the whole project and rewrite the code from scratch.&lt;/p&gt;
&lt;p&gt;It is good to review and update your code if you have some free time or consider that the old version of your project is too slow or throws too many errors. However, it can be really annoying to do this every time you need to make the slightest adjustment to the code and it defeats the purpose of having an automation project in the first place.&lt;/p&gt;
&lt;p&gt;Remember when commenting on code, it’s important to say &lt;strong&gt;WHY&lt;/strong&gt; you are using an approach or the other, not just describe &lt;strong&gt;WHAT&lt;/strong&gt; the code does. That should be self evident.&lt;/p&gt;
&lt;p&gt;Now that hopefully you see why comments are important when writing code, let’s see how you can simplify your code and reduce the number of lines of code you are using.&lt;/p&gt;
&lt;p&gt;We will do this in the next section.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;observing-the-wet-dry-principle&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Observing the &lt;strong&gt;WET&lt;/strong&gt; / &lt;strong&gt;DRY&lt;/strong&gt; principle&lt;/h1&gt;
&lt;p&gt;No matter how well you comment your code, if there are too many lines of code, you will still spend a lot of time trying to update and maintain it. This is especially the case for chunks of code that are repeated multiple times in a project.&lt;/p&gt;
&lt;p&gt;In order to explain this better, I will go over some coding practices, specifically the &lt;strong&gt;WET&lt;/strong&gt; / &lt;strong&gt;DRY&lt;/strong&gt; coding practices.&lt;/p&gt;
&lt;div id=&#34;wet-code-vs.-dry-code&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;WET&lt;/strong&gt; Code vs. &lt;strong&gt;DRY&lt;/strong&gt; Code&lt;/h2&gt;
&lt;p&gt;As you most likely already guessed, &lt;strong&gt;WET&lt;/strong&gt; and &lt;strong&gt;DRY&lt;/strong&gt; are accronyms:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;DRY&lt;/strong&gt; stands for &lt;strong&gt;Don’t repeat yourself&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;WET&lt;/strong&gt; has multiple accepted meanings, some of them being
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;We enjoy typing&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Write every time&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Write everything twice&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Waste everyone’s time&lt;/strong&gt; (this being my favourite).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As you can guess from the names it is preferable to have &lt;strong&gt;DRY&lt;/strong&gt; code as opposed to &lt;strong&gt;WET&lt;/strong&gt;. Usually this means that &lt;strong&gt;DRY&lt;/strong&gt; code is not repeated over and over again, while &lt;strong&gt;WET&lt;/strong&gt; code is found in your project more than 3-4 times.&lt;/p&gt;
&lt;p&gt;Observing this principle is important if you want to have a flexible project that will be easy to update if it will be required in the future. The chances for you to overlook something and break your code are lower if you have to change it in fewer places.&lt;/p&gt;
&lt;p&gt;Let’s check an example of &lt;strong&gt;WET&lt;/strong&gt; and &lt;strong&gt;DRY&lt;/strong&gt; code and discuss it afterwards.&lt;/p&gt;
&lt;div id=&#34;wet-code&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;strong&gt;WET&lt;/strong&gt; Code&lt;/h3&gt;
&lt;p&gt;We will use the same data set as before and I will show you how it can be difficult to maintain &lt;strong&gt;WET&lt;/strong&gt; code.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# We will use tidyverse as it contains the required libraries
library(tidyverse)
# The first part will be the core of our code
mtcars %&amp;gt;%
  mutate(car_names = rownames(mtcars),
         cyl = as.factor(cyl)) %&amp;gt;%
  ggplot(mapping = aes(x = cyl, y = mpg)) +
  
# Now we will recreate the code we used previously to obtain the same graph
  geom_boxplot() +
  geom_point() +
  geom_text(mapping = aes(label = car_names), hjust = 0, nudge_x = 0.05, check_overlap = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://www.vladaluas.com/post/code-maintenance/index.en_files/figure-html/wet_code_core-1.png&#34; width=&#34;100%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Let’s say that we want to show a scatter plot that illustrates the relationship between horse power (&lt;strong&gt;hp&lt;/strong&gt;) and miles per gallon (&lt;strong&gt;mpg&lt;/strong&gt;) and use the number of cylinders (&lt;strong&gt;cyl&lt;/strong&gt;) as a colour grouping.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# We still need the same core as for the previous graph
mtcars %&amp;gt;%
  mutate(car_names = rownames(mtcars),
         cyl = as.factor(cyl)) %&amp;gt;%
  ggplot(mapping = aes(x = hp, y = mpg)) +
# Please note that we needed to change the mapping in the core code
  geom_point(mapping = aes(colour = cyl)) +
  geom_text(mapping = aes(label = car_names), hjust = 0, nudge_x = 5, check_overlap = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://www.vladaluas.com/post/code-maintenance/index.en_files/figure-html/wet_code_scatter-1.png&#34; width=&#34;100%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now let’s try one more example in order to have a clear image of the problem, and try to find a solution together. We will have another graph with the same core &lt;em&gt;ish&lt;/em&gt; dataset, and we will use a bar chart to show the total horse power (&lt;strong&gt;hp&lt;/strong&gt;) for each category by number of cylinders (&lt;strong&gt;cyl&lt;/strong&gt;). We can see the code below:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mtcars %&amp;gt;%
  mutate(car_names = rownames(mtcars),
         cyl = as.factor(cyl)) %&amp;gt;%
  ggplot(mapping = aes(x = cyl, y = hp)) +
  
# Please note that we needed to change the mapping in the core code -- AGAIN
  geom_col()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://www.vladaluas.com/post/code-maintenance/index.en_files/figure-html/wet_code_column-1.png&#34; width=&#34;100%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Besides the fact that it can be annoying as hell, I’m pretty sure that by now you have seen some problems with needing to repeat code over and over again. However, since it would be awkward to just finish the article here, I will spell it out.&lt;/p&gt;
&lt;p&gt;Every time you need to change a parameter, you need to&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;remember where you used that parameter&lt;/li&gt;
&lt;li&gt;replace it&lt;/li&gt;
&lt;li&gt;make sure you have not forgotten any previous use&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Also, due to the annoying phenomenon that is Murphy’s law, most times you will not be able to just use &lt;strong&gt;Find and Replace&lt;/strong&gt; as you might only need to change that parameter in just a few code chunks, or everywhere but one code chunk.&lt;/p&gt;
&lt;p&gt;There are some ways in which you can avoid having this type of &lt;strong&gt;WET&lt;/strong&gt; code.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;dry-code&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;strong&gt;DRY&lt;/strong&gt; Code&lt;/h3&gt;
&lt;p&gt;I am sure by now that you have seen the solution to the problems exposed previously: use &lt;strong&gt;DRY&lt;/strong&gt; code. There, problem solved! However, how do we do that?&lt;/p&gt;
&lt;p&gt;There are a number of ways, and the one that will help us the most is the fact that &lt;code&gt;R&lt;/code&gt; is an object-oriented language. That basically means that you can store anything in a variable and call on that variable as opposed to writting the whole expression over and over again.&lt;/p&gt;
&lt;p&gt;In the next section we will see this in practice. We will store the core of the graphs into a variable (&lt;strong&gt;plt&lt;/strong&gt;) and we will add layers to it. In order to do so, we will use the code below:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plt &amp;lt;- mtcars %&amp;gt;%
          mutate(car_names = rownames(mtcars),
                 cyl = as.factor(cyl)) %&amp;gt;%
          ggplot(mapping = aes(x = cyl, y = mpg))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we have the core of the plot stored into an object, let’s see how this can help us.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Our core plot
plt +
# As previously we just add the new objects to the plot
  geom_boxplot() +
  geom_point() +
  geom_text(mapping = aes(label = car_names), hjust = 0, nudge_x = 0.05, check_overlap = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://www.vladaluas.com/post/code-maintenance/index.en_files/figure-html/dry_code_boxplot-1.png&#34; width=&#34;100%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;As you can see, whenever we want to use that core code, we just need to change it once and use the &lt;code&gt;plt&lt;/code&gt; object for every other occurrence. Still, I am sure you have noticed a problem with my solution. What if we want to change the &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; axes? Wouldn’t we need to go back to the code and change it every time we want to change the axes.&lt;/p&gt;
&lt;p&gt;This complicates the situation o bit, however the solution is to include in the &lt;code&gt;plt&lt;/code&gt; object just the desired code, and everything else that is changing is left out of the object. In this case, we will leave the &lt;code&gt;ggplot()&lt;/code&gt; function out as well.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plt &amp;lt;- mtcars %&amp;gt;%
          mutate(car_names = rownames(mtcars),
                 cyl = as.factor(cyl))
# The code becomes
plt %&amp;gt;%
  ggplot(mapping = aes(x = cyl, y = mpg)) +
  geom_boxplot() +
  geom_point() +
  geom_text(mapping = aes(label = car_names), hjust = 0, nudge_x = 0.05, check_overlap = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://www.vladaluas.com/post/code-maintenance/index.en_files/figure-html/dry_code_df-1.png&#34; width=&#34;100%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;As we can see this can help us reduce the number of lines of code. In this particular case not by much, however, if you have to type the 10 lines of code for one dataset transformation over and over again, it is very useful to store all those transformations is an object. In this particular case, that object would be another dataset.&lt;/p&gt;
&lt;p&gt;Although this particular example is a basic one, we just created a new dataset that is easier to work with, the true power of &lt;code&gt;R&lt;/code&gt; being object oriented, and what helps the most in keeping your code &lt;strong&gt;DRY&lt;/strong&gt; is what we will discuss in the next section, &lt;strong&gt;custom functions&lt;/strong&gt;.&lt;/p&gt;
&lt;div id=&#34;custom-functions&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Custom Functions&lt;/h4&gt;
&lt;p&gt;Custom functions are another way to keep your code &lt;strong&gt;DRY&lt;/strong&gt;. They are a powerful tool that can assist you keep your code easily maintainable and with fewer line of code.&lt;/p&gt;
&lt;p&gt;They allow you to store and standardise the steps you would normally apply a large range of objects, datasets, columns or even other functions.&lt;/p&gt;
&lt;p&gt;In order to understand this principle better, we will create a dataset from scratch to serve as a clear example of the usefulness of custom functions. You can create it as well using the code below:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# We will set a seed for the random generator so we can get the same data should you chose to use the same code
set.seed(123)
# We need to generate some random data, so I will use the rnorm() function. You can use other functions if you like
df &amp;lt;-     # our data frame
  cbind(  # It&amp;#39;s easier to generate columns and bind them together
    tibble(x = rnorm(10, 0, 2)),
    tibble(y = rnorm(10, 4, 9)),
    tibble(z = rnorm(10, 15, 1)),
    tibble(q = rnorm(10, 2, 18))
  )
# Now we need some NA values. We will add them at the end
df &amp;lt;- 
  rbind( # we will simply bind some rows at the end
  df,
  c(NA, NA, NA, NA),
  c(NA, NA, NA, NA),
  c(NA, NA, NA, NA),
  c(NA, NA, NA, NA),
  c(NA, NA, NA, NA))&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now that this dataset has some missing data, let’s say that you want to replace the missing data with some values. How do you do this? The most used practises just replace the missing values with the &lt;strong&gt;mean&lt;/strong&gt; value or the &lt;strong&gt;median&lt;/strong&gt; value.&lt;/p&gt;
&lt;p&gt;Let’s say you decide to use the &lt;strong&gt;mean&lt;/strong&gt; value. In practice, you would do the following:&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df %&amp;gt;%
  mutate(x = ifelse(is.na(x), mean(x, na.rm = T), x),
         y = ifelse(is.na(y), mean(y, na.rm = T), y),
         z = ifelse(is.na(z), mean(z, na.rm = T), z),
         q = ifelse(is.na(q), mean(q, na.rm = T), q))
#&amp;gt;             x           y        z          q
#&amp;gt; 1  -1.1209513  15.0167362 13.93218  9.6763560
#&amp;gt; 2  -0.4603550   7.2383244 14.78203 -3.3112867
#&amp;gt; 3   3.1174166   7.6069431 13.97400 18.1122619
#&amp;gt; 4   0.1410168   4.9961444 14.27111 17.8064028
#&amp;gt; 5   0.2585755  -1.0025702 14.37496 16.7884595
#&amp;gt; 6   3.4301300  20.0822182 13.31331 14.3955246
#&amp;gt; 7   0.9218324   8.4806543 15.83779 11.9705178
#&amp;gt; 8  -2.5301225 -13.6995544 15.15337  0.8855892
#&amp;gt; 9  -1.3737057  10.3122031 13.86186 -3.5073279
#&amp;gt; 10 -0.8913239  -0.2551227 16.25381 -4.8484780
#&amp;gt; 11  0.1492513   5.8775976 14.57544  7.7968019
#&amp;gt; 12  0.1492513   5.8775976 14.57544  7.7968019
#&amp;gt; 13  0.1492513   5.8775976 14.57544  7.7968019
#&amp;gt; 14  0.1492513   5.8775976 14.57544  7.7968019
#&amp;gt; 15  0.1492513   5.8775976 14.57544  7.7968019&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Remember what we mentioned earlier, that is a good idea to not repeat your code more than 3-4 times? In this example is all good since we only have four lines of code, however, even these four lines can be annoying to type. Also, if we need to change the function, it can be annoying to go and update all of them. And everything will get even more complicated with more lines of code.&lt;/p&gt;
&lt;p&gt;In order to resolve that we will create a function. Remember how I said that everything is an object in &lt;code&gt;R&lt;/code&gt;? Here is where this is very useful. We can just store a function in an object.&lt;/p&gt;
&lt;p&gt;Basically we will just use the logic we used in the &lt;code&gt;mutate&lt;/code&gt; and store it like we do with everything else.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# First we need to pick a name for the function. Since naming objects is not the scope of this article we will just pick something at random
my_awesome_function &amp;lt;- function(x){ # this tells R that it is a function and x is whatever we choose to include in there
  
  # The actual action that is done when calling this function
  ifelse(is.na(x), mean(x, na.rm = T), x)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s check and see if the results are the same.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df %&amp;gt;%
  mutate(x = my_awesome_function(x),
         y = my_awesome_function(y),
         z = my_awesome_function(z),
         q = my_awesome_function(q))
#&amp;gt;             x           y        z          q
#&amp;gt; 1  -1.1209513  15.0167362 13.93218  9.6763560
#&amp;gt; 2  -0.4603550   7.2383244 14.78203 -3.3112867
#&amp;gt; 3   3.1174166   7.6069431 13.97400 18.1122619
#&amp;gt; 4   0.1410168   4.9961444 14.27111 17.8064028
#&amp;gt; 5   0.2585755  -1.0025702 14.37496 16.7884595
#&amp;gt; 6   3.4301300  20.0822182 13.31331 14.3955246
#&amp;gt; 7   0.9218324   8.4806543 15.83779 11.9705178
#&amp;gt; 8  -2.5301225 -13.6995544 15.15337  0.8855892
#&amp;gt; 9  -1.3737057  10.3122031 13.86186 -3.5073279
#&amp;gt; 10 -0.8913239  -0.2551227 16.25381 -4.8484780
#&amp;gt; 11  0.1492513   5.8775976 14.57544  7.7968019
#&amp;gt; 12  0.1492513   5.8775976 14.57544  7.7968019
#&amp;gt; 13  0.1492513   5.8775976 14.57544  7.7968019
#&amp;gt; 14  0.1492513   5.8775976 14.57544  7.7968019
#&amp;gt; 15  0.1492513   5.8775976 14.57544  7.7968019&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, the results are the same, with a lot less code written. This trick is also handy if you want to change the function in the future. All you need to do is change the original function and leave the rest code intact. Like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;my_awesome_function &amp;lt;- function(x){ 
  
  ifelse(is.na(x), median(x, na.rm = T), x)
}
df %&amp;gt;%
  mutate(x = my_awesome_function(x),
         y = my_awesome_function(y),
         z = my_awesome_function(z),
         q = my_awesome_function(q))
#&amp;gt;             x           y        z          q
#&amp;gt; 1  -1.1209513  15.0167362 13.93218  9.6763560
#&amp;gt; 2  -0.4603550   7.2383244 14.78203 -3.3112867
#&amp;gt; 3   3.1174166   7.6069431 13.97400 18.1122619
#&amp;gt; 4   0.1410168   4.9961444 14.27111 17.8064028
#&amp;gt; 5   0.2585755  -1.0025702 14.37496 16.7884595
#&amp;gt; 6   3.4301300  20.0822182 13.31331 14.3955246
#&amp;gt; 7   0.9218324   8.4806543 15.83779 11.9705178
#&amp;gt; 8  -2.5301225 -13.6995544 15.15337  0.8855892
#&amp;gt; 9  -1.3737057  10.3122031 13.86186 -3.5073279
#&amp;gt; 10 -0.8913239  -0.2551227 16.25381 -4.8484780
#&amp;gt; 11 -0.1596691   7.4226337 14.32303 10.8234369
#&amp;gt; 12 -0.1596691   7.4226337 14.32303 10.8234369
#&amp;gt; 13 -0.1596691   7.4226337 14.32303 10.8234369
#&amp;gt; 14 -0.1596691   7.4226337 14.32303 10.8234369
#&amp;gt; 15 -0.1596691   7.4226337 14.32303 10.8234369&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Please note that all you need to do if you want to use the &lt;code&gt;median&lt;/code&gt; and not the &lt;code&gt;mean&lt;/code&gt; is update one line of code, not four. Writing custom functions is a very powerful tool as it allows you to centralise your logic and make sure you are using the same operation across all variables that need it.&lt;/p&gt;
&lt;p&gt;Think of how easy would be to forget a &lt;code&gt;na.rm = TRUE&lt;/code&gt; if you have 40 variables that require this operation, especially that you might not use this in one place in your project.&lt;/p&gt;
&lt;p&gt;If you want, you can give this function more flexibility and add the operation we want to use as a parameter to our awesome function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;my_awesome_function &amp;lt;- function(x, .func){
  ifelse(is.na(x), 
         .func(x, na.rm = T),
         x)
}
df %&amp;gt;%
  mutate(x = my_awesome_function(x, mean),
         y = my_awesome_function(y, mean),
         z = my_awesome_function(z, median),
         q = my_awesome_function(q, sum))
#&amp;gt;             x           y        z          q
#&amp;gt; 1  -1.1209513  15.0167362 13.93218  9.6763560
#&amp;gt; 2  -0.4603550   7.2383244 14.78203 -3.3112867
#&amp;gt; 3   3.1174166   7.6069431 13.97400 18.1122619
#&amp;gt; 4   0.1410168   4.9961444 14.27111 17.8064028
#&amp;gt; 5   0.2585755  -1.0025702 14.37496 16.7884595
#&amp;gt; 6   3.4301300  20.0822182 13.31331 14.3955246
#&amp;gt; 7   0.9218324   8.4806543 15.83779 11.9705178
#&amp;gt; 8  -2.5301225 -13.6995544 15.15337  0.8855892
#&amp;gt; 9  -1.3737057  10.3122031 13.86186 -3.5073279
#&amp;gt; 10 -0.8913239  -0.2551227 16.25381 -4.8484780
#&amp;gt; 11  0.1492513   5.8775976 14.32303 77.9680190
#&amp;gt; 12  0.1492513   5.8775976 14.32303 77.9680190
#&amp;gt; 13  0.1492513   5.8775976 14.32303 77.9680190
#&amp;gt; 14  0.1492513   5.8775976 14.32303 77.9680190
#&amp;gt; 15  0.1492513   5.8775976 14.32303 77.9680190&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, this version of the custom function allows more flexibility in deciding what operation we want to use on our variables. However, we also need to take into account that this will require us to change the operation in multiple places, if we want to change the default. If we want to use different operation on different columns, this would be the best approach.&lt;/p&gt;
&lt;p&gt;It all depends on your needs.&lt;/p&gt;
&lt;p&gt;With this said, I would like to show you a code example that will recreate the graphs we had earlier and allow us to change the &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; axes and the colour grouping.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;my_plot &amp;lt;- function(.data, x, y, colour, nudge){
  x &amp;lt;- enquo(x)
  y &amp;lt;- enquo(y)
  colour &amp;lt;- enquo(colour)
  
  ggplot(.data, mapping = aes(x = !!x, y = !!y, colour = !!colour)) +
    geom_boxplot() +
    geom_point() +
    geom_text(mapping = aes(label = car_names), hjust = 0, nudge_x = nudge, check_overlap = TRUE)
  
}
mtcars %&amp;gt;%
  mutate(car_names = rownames(mtcars),
         cyl = as.factor(cyl)) %&amp;gt;%
  # Our custom function
  my_plot(cyl, mpg, cyl, 0.05)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://www.vladaluas.com/post/code-maintenance/index.en_files/figure-html/custom_function_plot-1.png&#34; width=&#34;100%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;I hope that I managed to impress upon you the utility and importance of custom functions in any data analysis project in &lt;code&gt;R&lt;/code&gt;, if you want to be able to update and maintain the code easily and relatively fast.&lt;/p&gt;
&lt;p&gt;In this article I have only scratched the surface of what custom functions can do in &lt;code&gt;R&lt;/code&gt; as the point of this article was to show you how you can write code that is easier to maintain and update. I plan on writing an article about functions and go into more detail, however, in the meantime, I would highly recommend checking out Hadley Wickham’s book &lt;a href=&#34;http://adv-r.had.co.nz/Introduction.html&#34;&gt;Advanced R&lt;/a&gt;. It is amazing!&lt;/p&gt;
&lt;p&gt;Let me know if you found this article helpful in your data projects.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

        
      </description>
    </item>
    
    <item>
      <title>GitHub With R</title>
      <link>https://www.vladaluas.com/post/github-with-r/</link>
      <pubDate>Wed, 10 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.vladaluas.com/post/github-with-r/</guid>
      <description>
        
          
&lt;script src=&#34;https://www.vladaluas.com/post/github-with-r/index.en_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;&lt;/br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Countless times, while working on a project I had to copy a file and save it with a suffix like &lt;em&gt;_v1&lt;/em&gt;, &lt;em&gt;_v2&lt;/em&gt; or &lt;em&gt;_my_name&lt;/em&gt;. It was almost always because the file was saved on a shared drive, multiple people were working on it and someone else had the file opened when I started working. This is where &lt;em&gt;GitHub&lt;/em&gt; comes to rescue. &lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;In this article I would like to discuss a new way to organise your personal or team projects as a data analyst by integrating &lt;strong&gt;GitHub&lt;/strong&gt; in your workflow.&lt;/p&gt;
&lt;p&gt;My main focus will be to show you how you can integrate &lt;strong&gt;GitHub&lt;/strong&gt; with your &lt;strong&gt;R&lt;/strong&gt; projects, however I will explain broadly how &lt;strong&gt;GitHub&lt;/strong&gt; works and what are the main advantages of integrating it in all your projects, not just the &lt;strong&gt;R&lt;/strong&gt; related ones.&lt;/p&gt;
&lt;p&gt;You might ask yourself what is &lt;strong&gt;GitHub&lt;/strong&gt; and why use it?&lt;/p&gt;
&lt;p&gt;Let me exemplify some situations that happened to me more than once and see if you can relate, and then we can discuss &lt;strong&gt;GitHub&lt;/strong&gt;.&lt;/p&gt;
&lt;div id=&#34;times-when-github-would-have-been-useful&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Times when GitHub would have been useful&lt;/h2&gt;
&lt;p&gt;Countless times, while working on a project I had to copy a file and save it with a suffix like &lt;strong&gt;_v1&lt;/strong&gt;, &lt;strong&gt;_v2&lt;/strong&gt; or &lt;strong&gt;_my_name&lt;/strong&gt;. It was almost always because the file was saved on a shared drive, multiple people were working on it and someone else had the file opened when I started working.&lt;/p&gt;
&lt;p&gt;Most of the times I would start working and not tell the other person to close it because it would be just &lt;em&gt;“a quick check-up”&lt;/em&gt;. After some hours or days of &lt;em&gt;“quick check-ups”&lt;/em&gt; on a read-only file I could either lose all the work I’ve done or save it in a different file, with one of the aforementioned suffixes. This situation can easily degenerate from a project that had one or two working files at first into one that now has multiple files. This usually means that someone in the team needs to spend a lot of time to integrate the files or directories in one cohesive project once more.&lt;/p&gt;
&lt;p&gt;Another situation that one can find frustrating is taking over someone else’s project or report.&lt;/p&gt;
&lt;p&gt;Depending on how organised they are, it can be a smooth transition or a nightmare that can take months to figure out. If the project is not organised in any cohesive way, and if the tasks that need to be executed are using different tools and folders that are not linked in any logical way, it can be very hard for someone taking over to remember the steps or change and repair something should it be needed.&lt;/p&gt;
&lt;p&gt;The person that developed the project or report might consider this process to be logical or has gotten used to it, however, the person taking over might have a difficult time adjusting or figuring out which of the many folders is the latest one.&lt;/p&gt;
&lt;p&gt;Although not a universal situation, I am sure a lot of people had to deal with similar scenarios, especially in teams where the work is segregated and each member has an area of expertise. With people having different ways of working, one can find it difficult to adjust to a project that is based on someone else’s working style.&lt;/p&gt;
&lt;p&gt;How about this? Has this ever happened to you?&lt;/p&gt;
&lt;p&gt;Your team is tasked with creating a report for a department in your company. You create the report, it works just fine and you implement it in production.&lt;/p&gt;
&lt;p&gt;Now, another department tells you they would like the same report with their data. Simple enough, you can just add the data. However, they would also like to include an extra feature so you add it and re-deploy the report.&lt;/p&gt;
&lt;p&gt;On top of this someone else thinks one of the original features should be changed just a bit, and maybe another one should be eliminated because it’s redundant and it takes space in the final product without bringing any value.&lt;/p&gt;
&lt;p&gt;Everyone is happy with the report, although it is very different to the original, but hey, that is how it should be. You are creating reports for the business decision makers and this is how reports should evolve, organically.&lt;/p&gt;
&lt;p&gt;However, the first department tells you that they still need the report in its original form.&lt;/p&gt;
&lt;p&gt;Since the current report is totally different from the original one, you have to spend a lot of time tracing back the original development of the report. You also have to keep in mind, that some of the changes where bug fixes, not feature changes. Those fixes will have to be included, so you will need to spend extra time trying to figure out what is a bug fix and what is a feature requested by the second department.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;what-is-github&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;What is GitHub?&lt;/h2&gt;
&lt;p&gt;If any of the above examples apply to you, especially if all of them apply, you might want to look into implementing &lt;strong&gt;GitHub&lt;/strong&gt; in your workflow.&lt;/p&gt;
&lt;p&gt;So, here we get back to our original question, what is &lt;strong&gt;GitHub&lt;/strong&gt;?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GitHub&lt;/strong&gt; is a platform that provides software development version control using &lt;strong&gt;Git&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Now, I know that the above needs no further explanation, however, I would like to ask you to bear with me since I spent some time phrasing the above in a non-developer way, so here it goes.&lt;/p&gt;
&lt;p&gt;Basically, &lt;strong&gt;GitHub&lt;/strong&gt; is a platform that allows you to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Keep your project in one single place&lt;/li&gt;
&lt;li&gt;Have multiple team members working on the project at the same time&lt;/li&gt;
&lt;li&gt;Use the latest version of your project&lt;/li&gt;
&lt;li&gt;Test different features safely&lt;/li&gt;
&lt;li&gt;Role back to a previous step easily if needed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It can do this by simply recording each change that you submit to your project.&lt;/p&gt;
&lt;p&gt;That means that you can see, download and use the latest version of the project and check its history by seeing the submitted changes. The changes are called &lt;strong&gt;commits&lt;/strong&gt; (if you want to use fancy &lt;strong&gt;Git&lt;/strong&gt; language) and they are snapshots of past stages of your project. If you ever want to check the status of your project at a previous stage, you just need to go to the &lt;strong&gt;commits&lt;/strong&gt; tab, click on the one that you consider it was the latest at which your project worked as intended, and voilà, your project works again.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GitHub&lt;/strong&gt; provides a way for multiple people to work on the same project at the same time and &lt;strong&gt;commit&lt;/strong&gt; changes to it, as long as they do not send conflicting &lt;strong&gt;commits&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;You can also create a separate branch so you can experiment with your project and if everything works well, you can just integrate it in the main branch of the project.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;workflow&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Workflow&lt;/h2&gt;
&lt;p&gt;Here is the workflow that you should follow, as I see it. This workflow is for teams that are just starting with &lt;strong&gt;GitHub&lt;/strong&gt; and in time, each team will develop it’s own workflow, however the below can be a good starting point.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Your team wants to start a new project&lt;/li&gt;
&lt;li&gt;You create a &lt;strong&gt;repository&lt;/strong&gt; in &lt;strong&gt;GitHub&lt;/strong&gt; (this will be your main source of truth)&lt;/li&gt;
&lt;li&gt;You divide the work within the team&lt;/li&gt;
&lt;li&gt;Each member clones the &lt;strong&gt;repository&lt;/strong&gt; on their local machine&lt;/li&gt;
&lt;li&gt;Each team member does their work&lt;/li&gt;
&lt;li&gt;Each member pushes their work onto the main &lt;strong&gt;repository&lt;/strong&gt; when it’s done&lt;/li&gt;
&lt;li&gt;Repeat from step 5 onward&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Every time you start a new task, or work on something, it’s a good idea to refresh the work on your local machine by pulling the &lt;strong&gt;repository&lt;/strong&gt; once more.&lt;/p&gt;
&lt;p&gt;These things can be done even if you work alone without any team members. It’s a good idea to keep your work on &lt;strong&gt;Github&lt;/strong&gt; as it allows you to better switch between machines and projects. Also it allows you to better understand decisions you’ve taken previously.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;installation&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Installation&lt;/h1&gt;
&lt;p&gt;If you decided you want to give it a go, let’s set everything up for you and your team.&lt;/p&gt;
&lt;p&gt;Since the steps are quite numerous and differ slightly for each OS, I would like to recommend following the instructions in the book &lt;a href=&#34;https://happygitwithr.com/install-intro.html&#34;&gt;Happy Git with R&lt;/a&gt; by &lt;em&gt;Jenny Bryan&lt;/em&gt; and her team. The book is excellent and the steps are clear and easy to follow.&lt;/p&gt;
&lt;p&gt;Also, if you want to start using &lt;strong&gt;Github&lt;/strong&gt;, the book is an excellent guide, way more detailed than this article, so I would really recommend reading it, or just having it as a reference if you encounter any problems.&lt;/p&gt;
&lt;p&gt;So, click on the link, install &lt;strong&gt;Git&lt;/strong&gt; and a &lt;strong&gt;GitHub client&lt;/strong&gt; and I’ll see you in a bit.&lt;/p&gt;
&lt;p&gt;All set up? Good!&lt;/p&gt;
&lt;p&gt;Fortunately, you will only have to go through this once when you install a machine, not every time you want to use or start a project.&lt;/p&gt;
&lt;p&gt;So, let’s get started with the good stuff.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;creating-and-using-repositories&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Creating and using Repositories&lt;/h1&gt;
&lt;p&gt;In this part I would like to show you how to use &lt;strong&gt;GitHub&lt;/strong&gt; from the &lt;strong&gt;RStudio IDE&lt;/strong&gt; and you will see that it is quite simple and straightforward to use.&lt;/p&gt;
&lt;p&gt;So, let’s starts by creating a &lt;strong&gt;repository&lt;/strong&gt;. You will need to go to &lt;a href=&#34;https://github.com&#34;&gt;https://github.com&lt;/a&gt; and in the upper left hand corner you will see a green button that says &lt;strong&gt;“NEW”&lt;/strong&gt;. Click on it.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://www.vladaluas.com/images/Screenshots_Git_with_R/New_Button.png&#34; alt=&#34;&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;New Repository Button&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Once you do that you will get a window asking you to name a new &lt;strong&gt;repository&lt;/strong&gt;. It will look like this:&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://www.vladaluas.com/images/Screenshots_Git_with_R/New_Repo_Window.png&#34; alt=&#34;&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;New Repository Window&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Now, we need to pick a name for said &lt;strong&gt;repository&lt;/strong&gt;. Let’s call it &lt;code&gt;Hello-World&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;As you can also see, it allows you to select whether your &lt;strong&gt;repository&lt;/strong&gt; should be public or private. Let’s make it public. Now we can click on &lt;strong&gt;Create Repository&lt;/strong&gt;.
Congrats, you have created your first &lt;strong&gt;repository&lt;/strong&gt; (&lt;strong&gt;repo&lt;/strong&gt; for short). This &lt;strong&gt;repository&lt;/strong&gt; is empty and it will look a bit weird, like below:&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://www.vladaluas.com/images/Screenshots_Git_with_R/Empty_Repo_Window.png&#34; alt=&#34;&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Empty Repo Window&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;As you can see, &lt;strong&gt;GitHub&lt;/strong&gt; is very helpful in this case and asks us if we want to create a new project or we already have an existing one that we would like to upload. I like to start a &lt;strong&gt;repo&lt;/strong&gt; by creating a &lt;strong&gt;ReadMe&lt;/strong&gt; file. It can be very useful for someone else to see exactly what is intended with this project. You can also record the stages of the project or other essential information. Click on &lt;strong&gt;README&lt;/strong&gt; and let’s get started&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://www.vladaluas.com/images/Screenshots_Git_with_R/Readme_edit.png&#34; alt=&#34;&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;README&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;strong&gt;README&lt;/strong&gt; in question is a simple &lt;strong&gt;markdown&lt;/strong&gt; document.
For those of you who have not worked with &lt;strong&gt;markdown&lt;/strong&gt; until now, it is a plain-text-formatting syntax that can be converted in many output formats. In this case that format is &lt;strong&gt;HTML&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Here is a &lt;a href=&#34;https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet&#34;&gt;link&lt;/a&gt; to a very nice cheat sheet if you want to edit your &lt;strong&gt;README&lt;/strong&gt; in a fancy way.
It is recommended to write a short summary of your project and the scope. Of course, you can add the initial set up, or kick off discussion, or whatever you feel like, go nuts! For this &lt;strong&gt;repo&lt;/strong&gt; we will just add the text “This is just a test version.” and scroll down. You will see the following &lt;strong&gt;commit&lt;/strong&gt; menu.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://www.vladaluas.com/images/Screenshots_Git_with_R/Readme_commit.png&#34; alt=&#34;&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Initial Commit&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;We can select the name of the &lt;strong&gt;commit&lt;/strong&gt;, remember, a &lt;strong&gt;commit&lt;/strong&gt; is a submission of change, and some additional description if we want. We will leave it as it is and click on &lt;strong&gt;Commit new file&lt;/strong&gt;. This will take us to the &lt;strong&gt;repo&lt;/strong&gt; window. Here you will be able to access the latest state of your project. At the moment it only has a &lt;strong&gt;README&lt;/strong&gt; file and looks like this:&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://www.vladaluas.com/images/Screenshots_Git_with_R/Repo_First_Commit.png&#34; alt=&#34;&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Repo after the first commit&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;connecting-github-to-r&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Connecting GitHub to R&lt;/h2&gt;
&lt;p&gt;Now that we have a &lt;strong&gt;repo&lt;/strong&gt; that we can connect it to &lt;strong&gt;R&lt;/strong&gt; and see what we can do with it and how we can easily update &lt;strong&gt;GitHub&lt;/strong&gt; from &lt;strong&gt;R&lt;/strong&gt;.
So, how do we do that? Simple, we need to click the &lt;strong&gt;Clone or download&lt;/strong&gt; button and we will get a &lt;em&gt;https&lt;/em&gt; link that will allow us to access the &lt;strong&gt;repository&lt;/strong&gt;. It should look like this:&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://www.vladaluas.com/images/Screenshots_Git_with_R/Clone_Repo.png&#34; alt=&#34;&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Clone Repo&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Now for the good part, let’s open &lt;strong&gt;RStudio&lt;/strong&gt; and select &lt;strong&gt;File&lt;/strong&gt; -&amp;gt; &lt;strong&gt;New Project&lt;/strong&gt; and you will get a window asking to select the type of project. You will need to select the last option &lt;strong&gt;Version Control&lt;/strong&gt;, then &lt;strong&gt;Git&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://www.vladaluas.com/images/Screenshots_Git_with_R/Project_Selection.png&#34; alt=&#34;&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Project Selection&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;This will get you to a window in which we can link the project with &lt;strong&gt;Git&lt;/strong&gt;. You will see a window looking like this:&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://www.vladaluas.com/images/Screenshots_Git_with_R/Git_Project.png&#34; alt=&#34;&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Project Selection&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Here we need to paste the link in the URL field. You can also select the name of the folder in which you will keep the project. I would suggest leaving the one suggested, and select the main folder in which you want to keep the project. In my case is &lt;strong&gt;~Documents/Projects/R/Github&lt;/strong&gt; because this is where I keep all my &lt;strong&gt;GitHub&lt;/strong&gt; related projects.&lt;/p&gt;
&lt;p&gt;All good?&lt;/p&gt;
&lt;p&gt;Congrats, you have just linked &lt;strong&gt;R&lt;/strong&gt; to &lt;strong&gt;GitHub&lt;/strong&gt;. Now we can work like we would in any other project, so let’s start creating some scripts.&lt;/p&gt;
&lt;p&gt;First, create a new &lt;code&gt;R Script&lt;/code&gt; (Ctrl / Cmd + Shift + N) and let’s play with some code. You can use the code below as an example. I will create some simple graphics.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggplot2)
ggplot(data = mtcars, 
       mapping = aes(x = hp, 
                     y = mpg, 
                     colour = gear,
                     size = qsec)) +
  geom_point(mapping = aes(shape = as.factor(cyl)))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://www.vladaluas.com/post/github-with-r/index.en_files/figure-html/unnamed-chunk-1-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We have the script for a plot so let’s also save it. We don’t want to lose all that hard work. Finally, we can check the status of our project.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggsave(filename = &amp;quot;My_Plot.png&amp;quot;,
       plot = last_plot())&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Save the script &lt;strong&gt;Plot.R&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;We can check the status of our project in the &lt;strong&gt;Git&lt;/strong&gt; tab, next to &lt;strong&gt;Environment&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://www.vladaluas.com/images/Screenshots_Git_with_R/Git_Tab.png&#34; alt=&#34;&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Git Tab&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Now, as you can see, we have some files in the project.
* .gitignore
* Hello-World.Rproj
* My_Plot.png
* Plot.R&lt;/p&gt;
&lt;p&gt;However, if we look in the project folder, we can find more files. Remember that it records just the changes from the last submission. So, let’s push them to &lt;strong&gt;GitHub&lt;/strong&gt;.
We can do that by clicking the &lt;strong&gt;Commit&lt;/strong&gt; button that will take us to a new tab in which we can select the file to &lt;strong&gt;commit&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://www.vladaluas.com/images/Screenshots_Git_with_R/Commit_Tab.png&#34; alt=&#34;&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Commit Tab&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;As you can see, we have multiple sections here. The pane on the upper left side shows us the files to be committed. Let’s select all of them by checking the box next to them.
Now we need to &lt;strong&gt;commit&lt;/strong&gt; them. Let’s write a message that will tell us the stage of our project in the upper right pane (&lt;em&gt;e.g.&lt;/em&gt; Final commit).
Once you click &lt;strong&gt;commit&lt;/strong&gt; the changes have been submitted to the project and have a message attached. This is helpful, however, we have one more simple step to complete the process.
As you can see, the tab is empty now, however, above the upper left pane a new message has appeared &lt;strong&gt;Your branch is ahead of origin/master by 1 commit&lt;/strong&gt;. This just tells us that the local project has some commits that were not updated to &lt;strong&gt;GitHub&lt;/strong&gt;. We can do that by clicking the push button (Green up arrow) on the right hand side of the tab.
We should get a message like the below:&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://www.vladaluas.com/images/Screenshots_Git_with_R/Commit_Message.png&#34; alt=&#34;&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Commit Message&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Congrats, you have just committed your first project to &lt;strong&gt;GitHub&lt;/strong&gt;. If you need to add more files, just do the same, add some files in &lt;strong&gt;R&lt;/strong&gt; or in the project folder and &lt;strong&gt;commit&lt;/strong&gt; and push them to &lt;strong&gt;GitHub&lt;/strong&gt;. Just remember that if you want to add new files, It is a good practice to pull the project from &lt;strong&gt;GitHub&lt;/strong&gt; before starting. You want to work on the latest version of the project.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;how-it-can-help-your-team&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;How it can help your team&lt;/h1&gt;
&lt;p&gt;You might ask yourself, why add this to my workflow? It just seems like an extra layer that I need to observe.
Well, yes, it can be an extra layer, however, as I mentioned in the beginning it is a great tool to manage you projects in just one place. It is also a great tool to make sure you always use the latest version of your project, you just need to link the &lt;strong&gt;repo&lt;/strong&gt; to &lt;strong&gt;R&lt;/strong&gt; and pull the &lt;strong&gt;repo&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;It is also a great tool that can help you trace back the reasons behind some of the decisions you have taken. Another advantage is that it records your project step by step so it is easy to review your workflow and possibly recreate it in another similar project.&lt;/p&gt;
&lt;p&gt;The last major benefit can be the fact that you can experiment with your projects as much as you like and if you screw something up, you can just delete the last &lt;strong&gt;commit&lt;/strong&gt;, or multiple commits until you get to the last version that worked. It is very easy to roll back your project.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusion&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;I hope that through this article that I managed to make you interested enough in &lt;strong&gt;GitHub&lt;/strong&gt; to test it out. You don’t have to start with very complex projects, I would suggest starting with small projects so you and your team can get comfortable with using it.&lt;/p&gt;
&lt;p&gt;It takes a surprisingly short time to adjust to the new work style. When I started using &lt;strong&gt;GitHub&lt;/strong&gt; for my own projects it was a good way for me to store some data in one place so I can share it between different devices. Then I started keeping my scripts there as well and I’ve noticed that it’s way better for me to have them in just one place.&lt;/p&gt;
&lt;p&gt;Now, I no longer need to make sure I am working on the right folder, or the latest, I just need to pull the project from &lt;strong&gt;GitHub&lt;/strong&gt; and start working on it.&lt;/p&gt;
&lt;p&gt;If you consider that it is something you would like to try for your team, please let me know how it went and if you like it.&lt;/p&gt;
&lt;/div&gt;

        
      </description>
    </item>
    
    <item>
      <title>Text Analysis with R</title>
      <link>https://www.vladaluas.com/post/text-analysis-with-r/</link>
      <pubDate>Wed, 10 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.vladaluas.com/post/text-analysis-with-r/</guid>
      <description>
        
          
&lt;script src=&#34;https://www.vladaluas.com/post/text-analysis-with-r/index.en_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;&lt;/br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Recently I found myself with some free time on my hands so I decided to learn a new skill, or at least start learning. So I thought to myself, what would be a good skill that would help me as a data analyst or would have helped me in the past? It had to be something that took a lot of time and that could be automated.&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Recently I found myself with some free time on my hands so I decided to learn a new skill, or at least start learning. So I thought to myself, what would be a good skill that would help me as a data analyst or would have helped me in the past? It had to be something that took a lot of time and that could be automated.&lt;/p&gt;
&lt;p&gt;And then it struck me, &lt;strong&gt;TEXT ANALYSIS!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I always hated the annoying task of having to analyse text, be it in the form of comments on the internet, transcripts from focus groups or something else, does not matter. As you might know, if you’ve done this sort of analysis, this can be a really boring and tedious work and can take a large amount of time. The way I used to do it was to read the comments, categorize each one then do some basic analysis based on those categories.&lt;/p&gt;
&lt;p&gt;You can avoid spending the huge amount of time on this situation if you learn how to analyse text using a programming language and here is why. You can be required to analyse text either as a recurring report or as a one time analysis. In both cases text analysis can be very beneficial.&lt;/p&gt;
&lt;p&gt;In the first case is kind of self-explanatory. You need to spend the time to set up the analysis, graphs and report, but this needs to be done just once and you can use it every time you want to refresh the report. The other solution is to analyse the data manually every time.&lt;/p&gt;
&lt;p&gt;Now, what about the second case, when you have a one time report? Wouldn’t it take just as much time to set up the report as it would to analyse it manually? Well, no and you will see in the article below how easy it can be to analyse data using &lt;code&gt;R&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So, in order to see how to analyse text using &lt;code&gt;R&lt;/code&gt; I have started reading &lt;a href=&#34;https://www.tidytextmining.com/index.html&#34;&gt;&lt;strong&gt;Text Mining with R&lt;/strong&gt;&lt;/a&gt; by &lt;em&gt;Julia Silge&lt;/em&gt; and &lt;em&gt;David Robinson&lt;/em&gt;. I highly recommend this book as their approach is to transform the text into a tidy format that allows you to easily analyse and visualize the results using graphs.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;disclaimers-and-the-structure&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Disclaimers and the structure&lt;/h1&gt;
&lt;p&gt;I would like to shortly discuss the structure of the article and make some disclaimers about it, so we are on the same page.&lt;/p&gt;
&lt;p&gt;This article is intended just as an introductory example into what text analysis can do and how it can be used by data analysts, although I encourage you to study further if you think these methods can be useful. It is not intended as a comprehensive course on Natural Language Processing (NLP), as that is a complex topic that cannot be dealt with in just one article. Here, I will just show you three methods that can cover a great deal of analytical needs in a company.&lt;/p&gt;
&lt;p&gt;I would also like to point out that I will show some basic sentiment analysis methods, however they do not cover all the possibilities and are just the tip of the iceberg. That being said, with some tweaking, they can reliably be used as a starting point in the endeavours to automate this process, with more complex methods being added at a latter time.&lt;/p&gt;
&lt;p&gt;So, with the disclaimers out of the way we will discuss:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Word Frequencies&lt;/li&gt;
&lt;li&gt;Comparisons Between Texts&lt;/li&gt;
&lt;li&gt;Sentiment Analysis&lt;/li&gt;
&lt;li&gt;Wordclouds&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;the-data&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;The Data&lt;/h1&gt;
&lt;p&gt;As a dataset, I though that a series of phone reviews would be a good starting point.&lt;/p&gt;
&lt;p&gt;As an analyst, it might be required of you to spend some time analysing reviews for different products your company makes and get insight from said reviews. As a dummy dataset I have chosen a series of reviews for the &lt;strong&gt;OnePlus&lt;/strong&gt; phone models. You can check the reviews &lt;a href=&#34;https://www.pcmag.com/categories/mobile-phones/brands/oneplus&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I could have chosen any other brand of phone, or any other product for that matter, however I own a &lt;strong&gt;OnePlus&lt;/strong&gt;. I want to check what is the general opinion about them and see if my decision was right or was it just bias.&lt;/p&gt;
&lt;p&gt;See, these text analysis skills can be used for selfish reasons as well, it doesn’t always have to be something &lt;em&gt;“useful”&lt;/em&gt; or &lt;em&gt;“productive”&lt;/em&gt;. You can learn them just so you can allow yourself to be too lazy to read a book or a review front to back.&lt;/p&gt;
&lt;p&gt;Now let’s download the data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# We will need a URL from where to download the data
# In this case we will do it from my GitHub repository
# You can download the data using this link
url &amp;lt;- &amp;quot;https://raw.github.com/VladAluas/Text_Analysis/master/Datasets/Text_review.csv&amp;quot;


# I prefer vroom to ingest csv, but you can use readr::read_csv() if you fancy it more
reviews &amp;lt;- vroom::vroom(url)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;#&amp;gt; Rows: 433
#&amp;gt; Columns: 3
#&amp;gt; Delimiter: &amp;quot;,&amp;quot;
#&amp;gt; chr [3]: Model, Segment, Text
#&amp;gt; 
#&amp;gt; Use `spec()` to retrieve the guessed column specification
#&amp;gt; Pass a specification to the `col_types` argument to quiet this message&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/br&gt;&lt;/p&gt;
&lt;p&gt;The structure of the data can be seen below:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(reviews)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;#&amp;gt; # A tibble: 6 x 3
#&amp;gt;   Model    Segment                Text                                          
#&amp;gt;   &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;                  &amp;lt;chr&amp;gt;                                         
#&amp;gt; 1 OnePlus~ Introduction           &amp;quot;The days of the $600 smartphone aren&amp;#39;t over ~
#&amp;gt; 2 OnePlus~ Design, Features, and~ &amp;quot;The OnePlus One doesn&amp;#39;t feel like a sub-$400~
#&amp;gt; 3 OnePlus~ Design, Features, and~ &amp;quot;Our white test unit features a so-called sil~
#&amp;gt; 4 OnePlus~ Design, Features, and~ &amp;quot;The 5.5-inch, 1080p IPS display is on par wi~
#&amp;gt; 5 OnePlus~ Design, Features, and~ &amp;quot;There are two speaker grilles flanking the m~
#&amp;gt; 6 OnePlus~ Design, Features, and~ &amp;quot;With GSM (850/900/1800/1900MHz), UMTS (Bands~&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/br&gt;&lt;/p&gt;
&lt;p&gt;As you can see, the data is structured in three columns: the model number, the segment of the review and the text from the segment.&lt;/p&gt;
&lt;p&gt;I have chosen to keep each paragraph from each review as a separate text because it’s easier to work with, and it’s more realistic. This is most likely how you might analyse the data when you read and compare the reviews section by section.&lt;/p&gt;
&lt;p&gt;Now that we have the data, I want to discuss the text analysis principles that I will use in this article.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;text-analysis&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Text Analysis&lt;/h1&gt;
&lt;p&gt;As you can see, it is quite hard to work with the data at the moment. You can’t count words or quantify them in any way, so we will need to transform the last column into a more analysis friendly format.&lt;/p&gt;
&lt;p&gt;As mentioned in the introduction, we will use some methods developed by &lt;em&gt;Julia Silge&lt;/em&gt; and &lt;em&gt;David Robinson&lt;/em&gt; in the &lt;code&gt;tidytext&lt;/code&gt; package. The function that we will &lt;em&gt;“abuse”&lt;/em&gt; in this article is &lt;code&gt;unnest_tokens()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This function allows us to transform the text column into a &lt;strong&gt;tidy&lt;/strong&gt; format (see &lt;a href=&#34;https://vita.had.co.nz/papers/tidy-data.pdf&#34;&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Let’s see it in action.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# We need to activate some additional libraries
# If you do not have the libraries installed you can install them using: install.packages(c(&amp;quot;tidyverse&amp;quot;, &amp;quot;tidytext&amp;quot;))
library(tidytext)
library(tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;#&amp;gt; Registered S3 methods overwritten by &amp;#39;readr&amp;#39;:
#&amp;gt;   method           from 
#&amp;gt;   format.col_spec  vroom
#&amp;gt;   print.col_spec   vroom
#&amp;gt;   print.collector  vroom
#&amp;gt;   print.date_names vroom
#&amp;gt;   print.locale     vroom
#&amp;gt;   str.col_spec     vroom&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;#&amp;gt; -- Attaching packages --------------------------------------- tidyverse 1.3.0 --&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;#&amp;gt; v ggplot2 3.3.3     v purrr   0.3.4
#&amp;gt; v tibble  3.0.6     v dplyr   1.0.4
#&amp;gt; v tidyr   1.1.2     v stringr 1.4.0
#&amp;gt; v readr   1.4.0     v forcats 0.5.1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;#&amp;gt; -- Conflicts ------------------------------------------ tidyverse_conflicts() --
#&amp;gt; x dplyr::filter() masks stats::filter()
#&amp;gt; x dplyr::lag()    masks stats::lag()&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;reviews %&amp;gt;%
# We need to specify the name of the column to be created (Word) and the source column (Text)
  unnest_tokens(&amp;quot;Word&amp;quot;, &amp;quot;Text&amp;quot;) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;#&amp;gt; # A tibble: 30,067 x 3
#&amp;gt;    Model     Segment      Word      
#&amp;gt;    &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;        &amp;lt;chr&amp;gt;     
#&amp;gt;  1 OnePlus 1 Introduction the       
#&amp;gt;  2 OnePlus 1 Introduction days      
#&amp;gt;  3 OnePlus 1 Introduction of        
#&amp;gt;  4 OnePlus 1 Introduction the       
#&amp;gt;  5 OnePlus 1 Introduction 600       
#&amp;gt;  6 OnePlus 1 Introduction smartphone
#&amp;gt;  7 OnePlus 1 Introduction aren&amp;#39;t    
#&amp;gt;  8 OnePlus 1 Introduction over      
#&amp;gt;  9 OnePlus 1 Introduction quite     
#&amp;gt; 10 OnePlus 1 Introduction yet       
#&amp;gt; # ... with 30,057 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, the function took all the sentences from the &lt;strong&gt;Text&lt;/strong&gt; column and broke them down into a format that has one word per row and way more rows than before. So, our new data structure is one step away from a tidy format, all we need to do is count each word to see how many times it appears in the text, and then we will have a tidy format.&lt;/p&gt;
&lt;p&gt;I would also like to point out, as you have already probably noticed, that the function has transformed all the words to lower case and removed all the special symbols (&lt;em&gt;e.g.&lt;/em&gt; the $ from the price described in the introduction of the &lt;strong&gt;OnePlus 1&lt;/strong&gt;). This is important because it can save us a lot of headaches when cleaning the data.&lt;/p&gt;
&lt;p&gt;Now we will transform the data in a proper tidy format. To do so, we will &lt;code&gt;unnest&lt;/code&gt; the sentences, we will count each word, and then we can display the frequencies on a graph.&lt;/p&gt;
&lt;p&gt;Because we want to use the graph later, we will create a function, &lt;code&gt;word_frequency()&lt;/code&gt; that contains all the steps we want to apply to the graph. We will also replace some characters, so we will not double or under count some words.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;reviews_tidy &amp;lt;- reviews %&amp;gt;%
  unnest_tokens(&amp;quot;Word&amp;quot;, &amp;quot;Text&amp;quot;) %&amp;gt;%
# We also want to prevent the analysis in showing 6t and 6t&amp;#39;s as two separate words
  mutate(Word = str_replace(Word, &amp;quot;&amp;#39;s&amp;quot;, &amp;quot;&amp;quot;))
# We want to display graphically a word frequency plot
# We will create a function that will store all the operations we will repeat several times
word_frequency &amp;lt;- function(x, top = 10){
  
  x %&amp;gt;%
    
# We need a word count
  count(Word, sort = TRUE) %&amp;gt;%
  
# We want to create a factor from the word column with the levels showing the most frequent words as top level
# This is just for aestethic reasons, however, it helps make the point
  mutate(Word = factor(Word, levels = rev(unique(Word)))) %&amp;gt;% 
# We use the &amp;quot;top&amp;quot; variable defined in the function so we can decide how many words we want to use 
  top_n(top) %&amp;gt;%
    
# This will be useful later if we want to use a grouping variable and will do nothing if we don&amp;#39;t  
  ungroup() %&amp;gt;%
  
# The graph itself
  ggplot(mapping = aes(x = Word, y = n)) +
  geom_col(show.legend = FALSE) +
  coord_flip() +
  labs(x = NULL)
}

reviews_tidy %&amp;gt;%
  word_frequency(15)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;#&amp;gt; Selecting by n&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://www.vladaluas.com/post/text-analysis-with-r/index.en_files/figure-html/tidy_data_with_stop-1.png&#34; width=&#34;100%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;There, frequency analysis done. Now, what does the word &lt;strong&gt;the&lt;/strong&gt; say about the &lt;strong&gt;OnePlus&lt;/strong&gt; brand of phones?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Nothing!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As you can see and might have expected, determiners and conjunctions (&lt;em&gt;e.g.&lt;/em&gt; the, and, a, to) are the most frequently used words in any language and do not tell us much about the message of a sentence, not by themselves at least. These are called stop words, and we will eliminate them, so we can focus on the words that can give us a better picture of the text.&lt;/p&gt;
&lt;p&gt;Fortunately for us, the &lt;code&gt;tidytext&lt;/code&gt; package provides a dataset called &lt;code&gt;stop_words&lt;/code&gt; (what else) that contains a list of all the determiners and conjunctions, adverbs and adjectives that we can eliminate from a text, so we can analyse it properly.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This dataset contains only stop words from English. If you analyse a different language, you would have to use a different dataset or create one for yourself.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;With that in mind, I think we can recreate the previous graph after we eliminate the stop words and see what it tells us about the &lt;strong&gt;OnePlus&lt;/strong&gt; phones overall.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Same dataset as before with an extra code line
reviews_tidy &amp;lt;- reviews %&amp;gt;%
  unnest_tokens(&amp;quot;Word&amp;quot;, &amp;quot;Text&amp;quot;) %&amp;gt;%
  anti_join(stop_words, by = c(&amp;quot;Word&amp;quot; = &amp;quot;word&amp;quot;)) %&amp;gt;% # anti_join just keeps the rows common to both data sets
  mutate(Word = str_replace(Word, &amp;quot;&amp;#39;s&amp;quot;, &amp;quot;&amp;quot;))
# The graph is the same as before, we just changed the dataset
reviews_tidy %&amp;gt;%
  word_frequency(15)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;#&amp;gt; Selecting by n&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://www.vladaluas.com/post/text-analysis-with-r/index.en_files/figure-html/tidy_data_without_stop-1.png&#34; width=&#34;100%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Slightly better, don’t you think?&lt;/p&gt;
&lt;p&gt;So, as an overall idea, we can see that the brand name (&lt;strong&gt;OnePlus&lt;/strong&gt;) is the most used, as we would expect. Then, we can see &lt;em&gt;phone&lt;/em&gt;, which is to be expected since we are talking about a product that is a phone.&lt;/p&gt;
&lt;p&gt;We can also see that &lt;em&gt;galaxy&lt;/em&gt; is mentioned quite a lot, just as much as &lt;em&gt;camera&lt;/em&gt; which is again expected. &lt;strong&gt;OnePlus&lt;/strong&gt; promoted themselves as a brand with high performance models at a cheaper price than a flagship from &lt;strong&gt;Samsung&lt;/strong&gt; or other makers, therefore it would be only natural to see the comparison between the two.&lt;/p&gt;
&lt;p&gt;However, if you reverse the analysis, you might not see &lt;strong&gt;OnePlus&lt;/strong&gt; in a &lt;strong&gt;Samsung&lt;/strong&gt; review because &lt;strong&gt;Samsung&lt;/strong&gt; is the &lt;strong&gt;gold standard&lt;/strong&gt; against which everyone is compared, while &lt;strong&gt;OnePlus&lt;/strong&gt; is not.&lt;/p&gt;
&lt;p&gt;Another pairing we see is &lt;em&gt;low&lt;/em&gt; and &lt;em&gt;light&lt;/em&gt; which is the part in the reviews where they are comparing camera performance in low light.&lt;/p&gt;
&lt;p&gt;Also you might have spotted that &lt;em&gt;7&lt;/em&gt; and &lt;em&gt;8&lt;/em&gt; are there as well. This is most likely because the &lt;em&gt;7&lt;/em&gt; from all the &lt;strong&gt;OnePlus 7&lt;/strong&gt; series is mentioned quite a lot, the same goes for the &lt;em&gt;8&lt;/em&gt;. This can be avoided, but it requires an extra step.&lt;/p&gt;
&lt;p&gt;You will need to replace the spaces in the model name (&lt;em&gt;e.g.&lt;/em&gt; &lt;code&gt;mutate(Word = str_replace(Word, &#34;OnePlus 7&#34;, &#34;OnePlus_7))&lt;/code&gt;), and do this for all the models not just &lt;strong&gt;OnePlus 7&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I will not do this, but you are welcome to try and let me know how the analysis changed.&lt;/p&gt;
&lt;p&gt;Now, the graph we used earlier shows us the most frequently used words across all texts in the corpus. This is useful because it gives us some good insight on what are the words most associated with &lt;strong&gt;OnePlus&lt;/strong&gt; as a brand overall.&lt;/p&gt;
&lt;p&gt;But, I would also like to have the top 5 words associated with each model. We can do so by adding two lines of code to the previous chunk. It’s as simple as:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;reviews_tidy %&amp;gt;%
  group_by(Model) %&amp;gt;% 
  word_frequency(5) +
  facet_wrap(~ Model, scales = &amp;quot;free_y&amp;quot;) # This is just to split the graph into multiple graphs for each model&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;#&amp;gt; Selecting by n&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://www.vladaluas.com/post/text-analysis-with-r/index.en_files/figure-html/word_frequency_facet_wrap-1.png&#34; width=&#34;100%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Cool, right?&lt;/p&gt;
&lt;p&gt;We have a matrix of graphics that shows us which terms are most frequently associated with a model and that is very useful from a business perspective. Although, keep in mind that these terms might require some cleaning. You might have words that are not useful for your analysis.&lt;/p&gt;
&lt;p&gt;There might be some cases in which you have a known fault in your product and it can be so frequent that it overshadows every other feedback. In this particular case an example can be the word &lt;strong&gt;oneplus&lt;/strong&gt;. This word has no relevance to the analysis, we know the name of the brand we are interested in, and having this word in the graphs might obscure the presence of a more relevant word.&lt;/p&gt;
&lt;p&gt;It can be anything else, let’s say a battery problem, you name it, I’m sure you have your own example in mind.&lt;/p&gt;
&lt;p&gt;Should that be the case, there is a simple solution for that. Add the undesired words to the &lt;code&gt;stop_words&lt;/code&gt; list and start the analysis all over again and it will give you the most frequent words that are of interest.&lt;/p&gt;
&lt;p&gt;I would suggest using this very sparsely, as you might overlook some crucial information that at some point seemed unimportant and now you forgot that is forcefully removed.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;comparison-between-models&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Comparison between models&lt;/h1&gt;
&lt;p&gt;That is all well and good, but in the end, we still have to analyse the graphs using our instincts and determine what is the conclusion for each model, right? This cannot be automated!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Yes, it can!!!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For our purpose we will use a method called &lt;strong&gt;Term frequency - inverse document frequency&lt;/strong&gt; (&lt;strong&gt;tf_idf&lt;/strong&gt; for short and the fact that it rolls off the tongue easier). You can read more about this &lt;a href=&#34;https://www.tidytextmining.com/tfidf.html#zipfs-law&#34;&gt;here&lt;/a&gt;, but I will also give you a &lt;strong&gt;TL;DR&lt;/strong&gt; here.&lt;/p&gt;
&lt;p&gt;As you could see in the first graph, the most frequent terms in the review are the ones with no analytical value whatsoever, &lt;em&gt;the&lt;/em&gt;, &lt;em&gt;and&lt;/em&gt;, &lt;em&gt;a&lt;/em&gt;, &lt;em&gt;etc&lt;/em&gt;. Words that have a high analytical value (&lt;em&gt;e.g.&lt;/em&gt; performance) will appear less often.&lt;/p&gt;
&lt;p&gt;Kepping that in mind, the &lt;strong&gt;tf_idf&lt;/strong&gt; method works based on this principle something like this. The word &lt;em&gt;oneplus&lt;/em&gt; is in all reviews so that does not tell us anything about a particular document. The model number on the other hand, is specific for each review and therefore way more important in helping us distinguish between the document. The same can go for the top tier rival phone models to &lt;strong&gt;OnePlus&lt;/strong&gt; at the time of the review (&lt;em&gt;e.g.&lt;/em&gt; &lt;strong&gt;Galaxy S20&lt;/strong&gt;).&lt;/p&gt;
&lt;p&gt;This can be used to our advantage with a bit of a twist. We can check for the words that are frequent in one review and not the others to see what distinguishes one document from another.&lt;/p&gt;
&lt;p&gt;This comparison can be done with a simple formula &lt;code&gt;bind_tf_idf()&lt;/code&gt; that assigns weights to words using the principles below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;words with high frequency in all the documents: &lt;strong&gt;low weight&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;words with high frequency in just one of the documents and not the other: &lt;strong&gt;high weight&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;words with low frequency across the board: &lt;strong&gt;low weight&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let’s see this in practice:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;review_tf_idf &amp;lt;- 
  reviews_tidy %&amp;gt;%
    count(Model, Word, sort = TRUE) %&amp;gt;%
    bind_tf_idf(Word, Model, n)
review_tf_idf %&amp;gt;%
  arrange(desc(tf_idf))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;#&amp;gt; # A tibble: 8,213 x 6
#&amp;gt;    Model              Word        n     tf   idf tf_idf
#&amp;gt;    &amp;lt;chr&amp;gt;              &amp;lt;chr&amp;gt;   &amp;lt;int&amp;gt;  &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;
#&amp;gt;  1 OnePlus 6T         6t         31 0.0293 2.08  0.0609
#&amp;gt;  2 OnePlus 5T         5t         21 0.0195 2.77  0.0540
#&amp;gt;  3 OnePlus 6          s9         18 0.0183 2.77  0.0508
#&amp;gt;  4 OnePlus 7T McLaren mclaren    20 0.0292 1.67  0.0489
#&amp;gt;  5 OnePlus 2          s6         11 0.0164 2.77  0.0456
#&amp;gt;  6 OnePlus 7 Pro 5G   5g         40 0.0620 0.693 0.0430
#&amp;gt;  7 OnePlus 7T         7t         22 0.0306 1.39  0.0425
#&amp;gt;  8 OnePlus 8 Pro      s20        25 0.0245 1.67  0.0410
#&amp;gt;  9 OnePlus 8          s20        25 0.0223 1.67  0.0373
#&amp;gt; 10 OnePlus 3T         3t         21 0.0222 1.67  0.0372
#&amp;gt; # ... with 8,203 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can display this using plots.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;review_tf_idf %&amp;gt;%
  
# We need to sort the data in descending order so we can create the factors for each term
  arrange(desc(tf_idf)) %&amp;gt;%
# We create the factors as we did previously
  mutate(Word = factor(Word, levels = rev(unique(Word)))) %&amp;gt;%
# Select just the top 5 words for each model
  group_by(Model) %&amp;gt;%
  top_n(5) %&amp;gt;%
  ungroup() %&amp;gt;%
# Our Plot
  ggplot(mapping = aes(x = Word, y = tf_idf, fill = Model)) +
  geom_col(show.legend = FALSE) +
  labs(x = NULL, y = NULL) +
  coord_flip() +
  facet_wrap(~ Model, scales = &amp;quot;free_y&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;#&amp;gt; Selecting by tf_idf&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://www.vladaluas.com/post/text-analysis-with-r/index.en_files/figure-html/tf_idf_graph-1.png&#34; width=&#34;100%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;As we can see, these are the main items that separate one review from the other. Amongst them we can see the main flagship of &lt;strong&gt;Samsung&lt;/strong&gt;, especially for latter reviews, they seem to compare the brands quite a lot.&lt;/p&gt;
&lt;p&gt;We can also single out that for &lt;strong&gt;One Plus 7 Pro 5G&lt;/strong&gt; there is a problem with overheating and the &lt;strong&gt;OnePlus 6&lt;/strong&gt; is described as elegant.&lt;/p&gt;
&lt;p&gt;Of course, this can be tweaked quite a bit depending on your needs. You can eliminate words, you can replace some of them, or you can add a different grouping to the analysis. I’m pretty sure you have an idea on what you would change when you apply it to your analytic needs.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;sentiment-analysis&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Sentiment Analysis&lt;/h1&gt;
&lt;p&gt;Now, finally the good part.&lt;/p&gt;
&lt;p&gt;In this segment, I would like to discuss some basic principles of sentiment analysis and how they can be used in data analysis to quickly get an idea about your product. So, how do we achieve that?&lt;/p&gt;
&lt;p&gt;Well, the most basic method, and the one that we will cover today, is to simply associate each word in the review to a sentiment. Then it becomes a simple matter of counting how many words are associated with positive or negative sentiments to get the overall affect of the text.&lt;/p&gt;
&lt;p&gt;This is quite straight forward and the &lt;code&gt;tidyverse&lt;/code&gt; package comes to our aid with some libraries that already have these associations made and are also validated against multiple sources. The libraries are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;AFFIN&lt;/code&gt; from &lt;a href=&#34;http://www2.imm.dtu.dk/pubdb/views/publication_details.php?id=6010&#34;&gt;Finn Årup Nielsen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bing&lt;/code&gt; from &lt;a href=&#34;https://www.cs.uic.edu/~liub/FBS/sentiment-analysis.html&#34;&gt;Bing Liu and collaborators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nrc&lt;/code&gt; from &lt;a href=&#34;http://saifmohammad.com/WebPages/NRC-Emotion-Lexicon.htm&#34;&gt;Saif Mohammad and Peter Turney&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each of these libraries is helpful in its own way and approaches sentiment analysis differently. Let’s check them:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;get_sentiments(&amp;quot;afinn&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;#&amp;gt; # A tibble: 2,477 x 2
#&amp;gt;    word       value
#&amp;gt;    &amp;lt;chr&amp;gt;      &amp;lt;dbl&amp;gt;
#&amp;gt;  1 abandon       -2
#&amp;gt;  2 abandoned     -2
#&amp;gt;  3 abandons      -2
#&amp;gt;  4 abducted      -2
#&amp;gt;  5 abduction     -2
#&amp;gt;  6 abductions    -2
#&amp;gt;  7 abhor         -3
#&amp;gt;  8 abhorred      -3
#&amp;gt;  9 abhorrent     -3
#&amp;gt; 10 abhors        -3
#&amp;gt; # ... with 2,467 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;get_sentiments(&amp;quot;bing&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;#&amp;gt; # A tibble: 6,786 x 2
#&amp;gt;    word        sentiment
#&amp;gt;    &amp;lt;chr&amp;gt;       &amp;lt;chr&amp;gt;    
#&amp;gt;  1 2-faces     negative 
#&amp;gt;  2 abnormal    negative 
#&amp;gt;  3 abolish     negative 
#&amp;gt;  4 abominable  negative 
#&amp;gt;  5 abominably  negative 
#&amp;gt;  6 abominate   negative 
#&amp;gt;  7 abomination negative 
#&amp;gt;  8 abort       negative 
#&amp;gt;  9 aborted     negative 
#&amp;gt; 10 aborts      negative 
#&amp;gt; # ... with 6,776 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;get_sentiments(&amp;quot;nrc&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;#&amp;gt; # A tibble: 13,901 x 2
#&amp;gt;    word        sentiment
#&amp;gt;    &amp;lt;chr&amp;gt;       &amp;lt;chr&amp;gt;    
#&amp;gt;  1 abacus      trust    
#&amp;gt;  2 abandon     fear     
#&amp;gt;  3 abandon     negative 
#&amp;gt;  4 abandon     sadness  
#&amp;gt;  5 abandoned   anger    
#&amp;gt;  6 abandoned   fear     
#&amp;gt;  7 abandoned   negative 
#&amp;gt;  8 abandoned   sadness  
#&amp;gt;  9 abandonment anger    
#&amp;gt; 10 abandonment fear     
#&amp;gt; # ... with 13,891 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I want to discuss these libraries just a bit.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;AFINN&lt;/code&gt; library gives a score between -5 and +5 to each word. Once this is done, the sentiment can be inferred by summing up the scores.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;bing&lt;/code&gt; library simply associates a word with a negative or positive valence. At the end we can count how many words are positive or negative.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;nrc&lt;/code&gt; library is interesting because it gives you a list of words that can be classified in multiple ways. As you can see, the second element, can be classified either as &lt;strong&gt;fear&lt;/strong&gt;, &lt;strong&gt;negative&lt;/strong&gt; or &lt;strong&gt;sadness&lt;/strong&gt;. This is useful if you want to check for a specific sentiment, or a list of specific sentiments in a text (&lt;em&gt;e.g.&lt;/em&gt; just how many terms are associated with fear)&lt;/p&gt;
&lt;p&gt;Let’s proceed by using the &lt;code&gt;AFINN&lt;/code&gt; library to check the sentiment for each model and see how they perform. We will use just the conclusion for each review as that should be the most relevant in transmitting the overall sentiment for the whole review.&lt;/p&gt;
&lt;p&gt;However, we have to keep in mind that these being technical reviews, they might contain a terminology different from the one used in natural language, and the analysis might not be as accurate as an analysis on Facebook posts, for example.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;conclusion_afinn &amp;lt;- reviews %&amp;gt;%
  filter(str_detect(Segment, &amp;quot;Conclusion&amp;quot;)) %&amp;gt;%
  unnest_tokens(&amp;quot;Word&amp;quot;, &amp;quot;Text&amp;quot;) %&amp;gt;%
  anti_join(stop_words, by = c(&amp;quot;Word&amp;quot; = &amp;quot;word&amp;quot;)) %&amp;gt;%
# We will get the sentiments with a inner_join since the words that don&amp;#39;t have a match, don&amp;#39;t have a score value
  inner_join(get_sentiments(&amp;quot;afinn&amp;quot;), by = c(&amp;quot;Word&amp;quot; = &amp;quot;word&amp;quot;))

conclusion_afinn&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;#&amp;gt; # A tibble: 122 x 4
#&amp;gt;    Model     Segment                 Word     value
#&amp;gt;    &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;                   &amp;lt;chr&amp;gt;    &amp;lt;dbl&amp;gt;
#&amp;gt;  1 OnePlus 1 Cameras and Conclusions cut         -1
#&amp;gt;  2 OnePlus 1 Cameras and Conclusions true         2
#&amp;gt;  3 OnePlus 1 Cameras and Conclusions alive        1
#&amp;gt;  4 OnePlus 1 Cameras and Conclusions true         2
#&amp;gt;  5 OnePlus 1 Cameras and Conclusions miss        -2
#&amp;gt;  6 OnePlus 1 Cameras and Conclusions straight     1
#&amp;gt;  7 OnePlus 1 Cameras and Conclusions capable      1
#&amp;gt;  8 OnePlus 1 Cameras and Conclusions free         1
#&amp;gt;  9 OnePlus 1 Cameras and Conclusions demand      -1
#&amp;gt; 10 OnePlus 1 Cameras and Conclusions impress      3
#&amp;gt; # ... with 112 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, each token has been unnested, and assigned a sentiment value.&lt;/p&gt;
&lt;p&gt;Now, in order to check the sentiments for each review, all we need to do is add the scores and plot them.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;conclusion_afinn %&amp;gt;%
  group_by(Model) %&amp;gt;%
  summarise(Score = sum(value)) %&amp;gt;%
  arrange(desc(Score)) %&amp;gt;%
  mutate(Model = factor(Model, levels = rev(unique(Model)))) %&amp;gt;%
  ggplot(mapping = aes(x = Model, y = Score)) +
  geom_col() +
  coord_flip() +
  labs(x = NULL)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://www.vladaluas.com/post/text-analysis-with-r/index.en_files/figure-html/conclusions_affin_graph-1.png&#34; width=&#34;100%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The scores are in and overall the &lt;strong&gt;Oneplus 2&lt;/strong&gt; has the best reviews.&lt;/p&gt;
&lt;p&gt;However, what if we want to see a report on which model has the most positive and negative reviews? For that we would use the &lt;code&gt;bing&lt;/code&gt; library.&lt;/p&gt;
&lt;p&gt;Let’s see how:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;conclusion_bing &amp;lt;- reviews %&amp;gt;%
  filter(str_detect(Segment, &amp;quot;Conclusion&amp;quot;)) %&amp;gt;%
  unnest_tokens(&amp;quot;Word&amp;quot;, &amp;quot;Text&amp;quot;) %&amp;gt;%
  anti_join(stop_words, by = c(&amp;quot;Word&amp;quot; = &amp;quot;word&amp;quot;)) %&amp;gt;%
  inner_join(get_sentiments(&amp;quot;bing&amp;quot;), by = c(&amp;quot;Word&amp;quot; = &amp;quot;word&amp;quot;))

conclusion_bing&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;#&amp;gt; # A tibble: 189 x 4
#&amp;gt;    Model     Segment                 Word       sentiment
#&amp;gt;    &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;                   &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;    
#&amp;gt;  1 OnePlus 1 Cameras and Conclusions led        positive 
#&amp;gt;  2 OnePlus 1 Cameras and Conclusions distortion negative 
#&amp;gt;  3 OnePlus 1 Cameras and Conclusions miss       negative 
#&amp;gt;  4 OnePlus 1 Cameras and Conclusions dynamic    positive 
#&amp;gt;  5 OnePlus 1 Cameras and Conclusions distortion negative 
#&amp;gt;  6 OnePlus 1 Cameras and Conclusions warped     negative 
#&amp;gt;  7 OnePlus 1 Cameras and Conclusions unnatural  negative 
#&amp;gt;  8 OnePlus 1 Cameras and Conclusions admirable  positive 
#&amp;gt;  9 OnePlus 1 Cameras and Conclusions soft       positive 
#&amp;gt; 10 OnePlus 1 Cameras and Conclusions prefer     positive 
#&amp;gt; # ... with 179 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can proceed with the same steps, just add the sentiment to the grouping.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;conclusion_bing %&amp;gt;%
  group_by(Model, sentiment) %&amp;gt;%
  count() %&amp;gt;%
  ungroup() %&amp;gt;%
  mutate(Model = reorder(Model, n)) %&amp;gt;%
  ggplot(mapping = aes(x = Model, y = n, fill = sentiment)) +
  geom_col(show.legend = FALSE) +
  coord_flip() +
  labs(x = NULL, y = &amp;quot;Negative vs positive sentiment / Model&amp;quot;) +
  facet_wrap(~ sentiment, ncol = 2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://www.vladaluas.com/post/text-analysis-with-r/index.en_files/figure-html/conclusions_bing_graph-1.png&#34; width=&#34;100%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Here we can see a more nuanced approach.&lt;/p&gt;
&lt;p&gt;For example, the &lt;strong&gt;OnePlus 6T&lt;/strong&gt; and the &lt;strong&gt;OnePlus 7 (for China)&lt;/strong&gt; have no negative reviews, but they also have only a few positive things said about them. This seems to be reflected in their placement in the previous graph as well.&lt;/p&gt;
&lt;p&gt;A curious case can be for the &lt;strong&gt;OnePlus 3&lt;/strong&gt; which seems to have more positive than negative reviews, however as an overall score it is dead last on a positivity ranking. This indicates that the review did not regard this model with high praise or the really negative descriptions were very negative. Most likely a combination of both.&lt;/p&gt;
&lt;p&gt;Both these approaches have their advantages and disadvantages and in practice you will most likely use a combination of both, not just one. It is really useful to view a problem from multiple angles. You never know which method is helpful for the decision makers in your company.&lt;/p&gt;
&lt;p&gt;With that in mind, I would like to discuss one more method of presenting the data that might help in some situations more than graphs.&lt;/p&gt;
&lt;div id=&#34;wordclouds&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;WordClouds&lt;/h2&gt;
&lt;p&gt;In this section I would like to show you a different approach in presenting the data, &lt;strong&gt;WordClouds&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I personally find them very useful when you are trying to communicate the prevalence of a word in a text or speech. They basically have the same role as a pie chart, but they’re way better because they display data in a more user-friendly way. Using a wordcloud will allow you to look at it and see how frequent a word is without having to check and re-check a legend for dozens of times.&lt;/p&gt;
&lt;p&gt;With that said, let’s check our wordcloud. It should show the same data as the first graph, just in a different display style, so I will use the same data set &lt;code&gt;reviews_tidy&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For this I will use the &lt;code&gt;wordcloud&lt;/code&gt; package. If you do not have it installed, you can install it by using &lt;code&gt;install.packages(&#34;wordcloud&#34;)&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(wordcloud)
#&amp;gt; Loading required package: RColorBrewer

reviews_tidy %&amp;gt;%
  count(Word) %&amp;gt;%
  with(wordcloud(Word, n, max.words = 100))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://www.vladaluas.com/post/text-analysis-with-r/index.en_files/figure-html/wordcloud_overall-1.png&#34; width=&#34;100%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;As you can see, the results are similar to the first analysis, the more frequent a word, the larger the font. However, with this type of graph we can include a lot more items. In this we have included 100 words, as opposed to 15 in the first graph.&lt;/p&gt;
&lt;p&gt;Now, this clearly shows that the most prevalent word is &lt;strong&gt;oneplus&lt;/strong&gt; followed by &lt;strong&gt;phone&lt;/strong&gt; then &lt;strong&gt;pro&lt;/strong&gt; and so on, exactly the same information we had before, the only difference is that we have a bigger picture using this method.&lt;/p&gt;
&lt;p&gt;As mentioned, it’s a very useful way to show the prevalence of multiple words in a text.&lt;/p&gt;
&lt;p&gt;Now, I would like to show you how you can use a wordcloud for sentiment analysis.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(reshape2)
#&amp;gt; 
#&amp;gt; Attaching package: &amp;#39;reshape2&amp;#39;
#&amp;gt; The following object is masked from &amp;#39;package:tidyr&amp;#39;:
#&amp;gt; 
#&amp;gt;     smiths


reviews_tidy %&amp;gt;%
  inner_join(get_sentiments(&amp;quot;bing&amp;quot;), by = c(&amp;quot;Word&amp;quot; = &amp;quot;word&amp;quot;)) %&amp;gt;%
  count(Word, sentiment, sort = TRUE) %&amp;gt;%
  acast(Word ~ sentiment, value.var = &amp;quot;n&amp;quot;, fill = 0) %&amp;gt;%
  comparison.cloud(colors = c(&amp;quot;#202121&amp;quot;, &amp;quot;#797C80&amp;quot;),
                   max.words = 50)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://www.vladaluas.com/post/text-analysis-with-r/index.en_files/figure-html/wordcloud_sentiment-1.png&#34; width=&#34;100%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;This is a very quick and useful way to show which elements influence the sentiment for your product the most and make decisions based on it.&lt;/p&gt;
&lt;p&gt;We can clearly see that the words that influence the most the negative scores are &lt;em&gt;noise&lt;/em&gt;, &lt;em&gt;expensive&lt;/em&gt; and &lt;em&gt;loud&lt;/em&gt; while the ones that influence the positive reviews are &lt;em&gt;excellent&lt;/em&gt;, &lt;em&gt;fast&lt;/em&gt; and &lt;em&gt;smooth&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;sentiment-analysis-wrap-up&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Sentiment Analysis wrap up&lt;/h2&gt;
&lt;p&gt;There is more to be said about sentiment analysis, however in this article I just wanted to give you a short introduction and show some basic principles for it.&lt;/p&gt;
&lt;p&gt;I’m sure you have noticed some of the quirks yourself. For example the lexicons we have used here are intended for just one word, and that can miss the sentiment of a phase (&lt;em&gt;e.g.&lt;/em&gt; &lt;em&gt;not good&lt;/em&gt; is a negative term, however the lexicon will see &lt;em&gt;not&lt;/em&gt; as neutral and &lt;em&gt;good&lt;/em&gt; as positive, therefore overall it will see it as positive). In order to avoid situations like this we can use pairing of words and check for these types of situation.&lt;/p&gt;
&lt;p&gt;I plan to go into more detail in a series of articles on the subject, so if you find something interesting or have a topic to discuss, please let me know.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusion&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;When I read the book, I realised that this type of analysis is very scalable, if done with a programming language like &lt;code&gt;R&lt;/code&gt;. By this I mean that a computer will have no problem in analysing 10 or 30.000 words in about the same time. For a human the difference is huge.&lt;/p&gt;
&lt;p&gt;Besides being scalable, this analysis can be done multiple times without having to change the code or spend the time setting everything up.&lt;/p&gt;
&lt;p&gt;The last advantage of this is that this method is not prone to human error or fatigue. Let’s be honest, we as humans get tired after some time spent in the same task, and we can get errors. Why not avoid this if possible?&lt;/p&gt;
&lt;p&gt;If you have to do these types of analyses, please let me know if you think this article could be useful in your day to day work, and if you have applied them, please let me know how it influenced your time spent on the analysis.&lt;/p&gt;
&lt;p&gt;Also, check &lt;em&gt;Julia&lt;/em&gt; and &lt;em&gt;David’s&lt;/em&gt; &lt;a href=&#34;https://www.tidytextmining.com/&#34;&gt;book&lt;/a&gt; and if it helped you and you can afford it, buy it to show your support of their great work.&lt;/p&gt;
&lt;/div&gt;

        
      </description>
    </item>
    
  </channel>
</rss>
